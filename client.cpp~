#include <iostream>
#include <sys/socket.h>
#include <sys/types.h>
#include <string>
#include <cstring>
#include "Message.h"
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sstream>
#include <signal.h>

#define SOCK_PORT 10914
#define MAX_CHAR  512


using namespace std;

struct sockaddr_in serv_addr;
int sock_stat;
int bind_stat;
int conn_stat;

char* getUsrNm();

int main(int argc, char* argv[]){

	char *serv_ip_addr;
	char *usr_nm;
	
	pthread_t t1,t2;

	if(argc != 2){
		cout << "Pass Server IP address as an input argument\n";
		cout << "Ex: ./a.out <ip_addr>\n";
		return (0);
	}else{ 
		serv_ip_addr = argv[1];
	}
	cout << "Server IP adrress: " << serv_ip_addr << "\n";

	// Create socket
	sock_stat = socket(AF_INET, SOCK_STREAM, 0);

	if(sock_stat == -1){
		cout << "Error creating client socket\n";
		return(0);
	}else
		cout << "Socket created\n";

	serv_addr.sin_family 		= AF_INET;
	serv_addr.sin_port		= SOCK_PORT;
	serv_addr.sin_addr.s_addr	= inet_addr(serv_ip_addr);

	
	/*bind_stat = bind(sock_stat, (struct sockaddr *)&serv_addr, sizeof(serv_addr));	//bind IP and Port to Socket

	if(-1 == bind_stat){
		cout << "Error binding port to socket\n";
		return(0);
	}else
		cout << "Socket bound to Port: " << SOCK_PORT << "\n";*/
	
	conn_stat = connect(sock_stat, (struct sockaddr *) &serv_addr, sizeof(serv_addr));

	if(conn_stat == -1){
		cout << "Error connecting to Server\n";
		cout << "\tServer IP: " << serv_ip_addr << "\n";
		cout << "\tPort: " << SOCK_PORT << "\n";
		return(0);
	}else{
		cout << "Connected to Server:\n";
		cout << "\tServer IP: " << serv_ip_addr << "\n";
		cout << "\tPort: " << SOCK_PORT << "\n";
	}
	
	int bRcvd = 0;
	char rcvBuffer[100];
	if((bRcvd = recv(sock_stat, rcvBuffer, 99, 0)) == -1){
		cout << "Unable to receive message to server. Retry.\n\n";
	}
	cout << "Test message from server: " << rcvBuffer << "\n";
	usr_nm = getUsrNm();	// Read username
	if(!usr_nm){
		return (0);
	}
	cout << "Username " << usr_nm << " approved by server\n";
	bool tempflag = false;
	while(!tempflag){

		switch(getChoice()){
			case 1: if(getActiveUsers() == -1){
					close(sock_stat);
					exit(1);
				}
				cout << "\n\n";
				break;
			case 2: //TODO
				if(getActiveUsers() == -1){
					close(sock_stat);
					exit(1);
				}
				break;
			case 3: tempflag = true;
				cout << "Thank You!\n";
				break;
			default: "Enter a valid option.\n";
				 break;
		}
	}
	cout << "Socket connection closed\n";
	close(sock_stat);
	return (0);
}

char* getUsrNm(){

	int bRcvd = -1;
	int bSent = 0;
	char rcvBuffer[100];
	int retryCount = 0;
	MESSAGE msg_send;
	MESSAGE msg_rcv;
	char* usr_nm;
	while(bRcvd < 0 && retryCount < 5){
		cout << "Enter username (limited to 10 characters):\n";
		cin >> msg_send->payload;
		//sock_stat
		msg_send->msg_type = 0;
		//strcpy(message->payload,usr_nm);
		if(send(sock_stat, msg_send, sizeof(msg_send),0) == -1){
			retryCount++;
			cout << "Unable to send message to server. Retry.\n\n";
			continue;
		}
		if((bRcvd = recv(sock_stat, msg_rcv, sizeof(msg_rcv), 0)) == -1){
			retryCount++;
			cout << "Unable to receive message to server. Retry.\n\n";
			continue;
		}
		if(msg_rcv->payload == "-1"){
			retryCount++;
			cout << "\n\tThe given username is already reserved by another user.\n";
			cout << "\tRetry with another username.\n\n";
			continue;
		}
	}
	usr_nm = msg_rcv->payload;
	free(msg_send);
	free(msg_rcv);
	if(retryCount == 5){
		return NULL;
	}
	return usr_nm;
}

int getChoice(){
	int choice;
	cout << "\n";
	cout << "*************** Main Menu ***************";
	cout << "Enter an option:\n";
	cout << "\t1: List available users\n";
	cout << "\t2: Chat\n";
	cout << "\t3: Exit application\n"
	
	cin >> choice;
	return choice;
}

int getActiveUsers(){
	cout << "Retrieving list of active users...\n";
	MESSAGE msg_send;
	MESSAGE msg_rcv;
	
	msg_send->msg_type = 2;
	
	if(send(sock_stat, msg_send, sizeof(msg_send),0) == -1){
		cout << "Unable to send message to server. Retry.\n\n";
		free(msg_send);
		free(msg_rcv);
		return -1;
	}
	if(recv(sock_stat, msg_rcv, sizeof(msg_rcv), 0) == -1){
		cout << "Unable to receive message to server. Retry.\n\n";
		free(msg_send);
		free(msg_rcv);		
		return -1;
	}
	
	if(!msg_rcv || !msg_rcv->payload){
		cout << "Error while processing the request\n";
		free(msg_send);
		free(msg_rcv);
		return -1;
	}
	
	istringstream msg(msg_rcv->payload);
	string s;
	cout << "\n********** List of Active Users **********\n";
	while(getline(msg,s,'$'))
		cout << "\t" << s;
	cout << "\n";
	free(msg_send);
	free(msg_rcv);
	return 0;	
}

int beginChat(){
	int choice = 0;
	bool loopExit = false;
	char* usr_nm;
	while(!loopExit){
		if(getActiveUsers() == -1){
			close(sock_stat);
			exit(1);
		}
		cout << "Enter choice:\n";
		cout << "\t1: Enter username to begin chat\n";
		cout << "\t2: Exit\n";
		cin  >> choice;
		switch(choice){
			case 1:	cout << "Enter username:\t";
				loopExit = true;
				cin >> usr_nm;
				cout << "\n";
				break;
			case 2:	return 0;
			default: cout << "Enter the right choice (1 or 2)\n";
				break;
		}
	}
	return 0;
}


void* writeMsg(){
	MESSAGE msg_send;
	char buf_msg[MAX_CHAR];
	msg_send->msg_type = 1;
	fgets(buf_msg,MAX_CHAR-1,stdin);
}

void exitApp(sig_t sig){
	cout << "Exiting from the application\n";
	close(sock_stat);
	exit(0);
}
